const Target = @import("std").build.Target;
const Builder = @import("std").build.Builder;
const std = @import("std");

pub fn build(b: *Builder) !void {
    const mode = b.standardReleaseOptions();
    const target = try Target.parse("armv8_5a-linux-gnueabihf");

// piHiPri.c obj //
    // // オブジェクトファイルを作成するステップ //
    // const object_piHiPri = b.addObject("piHiPri", null);

    // object_piHiPri.addCSourceFile("WiringPi/wiringPi/piHiPri.c",???);

    // // ビルドモードを設定 //
    // object_piHiPri.setBuildMode(mode);

    // // ビルドターゲットを設定 //
    // object_piHiPri.setTheTarget(target);

    // // ビルド成果物を配置するディレクトリを設定 //
    // object_piHiPri.setOutputDir("./");

    // // インクルードディレクトリを設定 //
    // object_piHiPri.addIncludeDir("WiringPi/wiringPi");

    // // システムライブラリのリンクを設定 //
    // object_piHiPri.linkSystemLibrary("c");

// setup.zen obj //
    // オブジェクトファイルを作成するステップ //
    const object_Setup = b.addObject("setup", "setup.zen");

    // ビルドモードを設定 //
    object_Setup.setBuildMode(mode);

    // ビルドターゲットを設定 //
    object_Setup.setTheTarget(target);

    // ビルド成果物を配置するディレクトリを設定 //
    object_Setup.setOutputDir("./");

    // インクルードディレクトリを設定 //
    object_Setup.addIncludeDir("WiringPi/wiringPi");

    // システムライブラリのリンクを設定 //
    object_Setup.linkSystemLibrary("c");

// setup exe //
    // 実行バイナリを作成するステップ //
    const exe = b.addExecutable("setup",null);

    // ビルドモードを設定 //
    exe.setBuildMode(mode);

    // ビルドターゲットを設定します。
    exe.setTheTarget(target);

    // インクルードディレクトリを設定 //
    exe.addIncludeDir("WiringPi/wiringPi");

    // システムライブラリのリンクを設定 //
    exe.linkSystemLibrary("c");

    // オブジェクトファイルをビルド対象として追加 //
    exe.addObjectFile("wiringPi.o");
    exe.addObjectFile("piHiPri.o");
    exe.addObjectFile("softPwm.o");
    exe.addObjectFile("softTone.o");
    // exe.addObject(object_piHiPri);
    exe.addObject(object_Setup);

    // installステップでexeステップが実行されるように設定 //
    exe.install();

    // exeステップでの生成物を実行するrun_cmdステップを作成 //
    const run_cmd = exe.run();

    // installステップとの依存関係を作成 //
    run_cmd.step.dependOn(b.getInstallStep());

    // runステップを作成 //
    const run_step = b.step("run", "Run the app");

    // run_cmdステップとの依存関係を作成 //
    run_step.dependOn(&run_cmd.step);
}
